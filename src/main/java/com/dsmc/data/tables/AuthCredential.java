/**
 * This class is generated by jOOQ
 */
package com.dsmc.data.tables;


import com.dsmc.data.Keys;
import com.dsmc.data.Public;
import com.dsmc.data.tables.records.AuthCredentialRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthCredential extends TableImpl<AuthCredentialRecord> {

	private static final long serialVersionUID = 81336050;

	/**
	 * The reference instance of <code>public.auth_credential</code>
	 */
	public static final AuthCredential AUTH_CREDENTIAL = new AuthCredential();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AuthCredentialRecord> getRecordType() {
		return AuthCredentialRecord.class;
	}

	/**
	 * The column <code>public.auth_credential.login</code>.
	 */
	public final TableField<AuthCredentialRecord, String> LOGIN = createField("login", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>public.auth_credential.password</code>.
	 */
	public final TableField<AuthCredentialRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.CHAR.length(64).nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.auth_credential.salt</code>.
	 */
	public final TableField<AuthCredentialRecord, String> SALT = createField("salt", org.jooq.impl.SQLDataType.CHAR.length(12).nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.auth_credential.jwt_token</code>.
	 */
	public final TableField<AuthCredentialRecord, String> JWT_TOKEN = createField("jwt_token", org.jooq.impl.SQLDataType.CHAR.length(64).defaulted(true), this, "");

	/**
	 * Create a <code>public.auth_credential</code> table reference
	 */
	public AuthCredential() {
		this("auth_credential", null);
	}

	/**
	 * Create an aliased <code>public.auth_credential</code> table reference
	 */
	public AuthCredential(String alias) {
		this(alias, AUTH_CREDENTIAL);
	}

	private AuthCredential(String alias, Table<AuthCredentialRecord> aliased) {
		this(alias, aliased, null);
	}

	private AuthCredential(String alias, Table<AuthCredentialRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<AuthCredentialRecord> getPrimaryKey() {
		return Keys.AUTH_CREDENTIAL_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<AuthCredentialRecord>> getKeys() {
		return Arrays.<UniqueKey<AuthCredentialRecord>>asList(Keys.AUTH_CREDENTIAL_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AuthCredential as(String alias) {
		return new AuthCredential(alias, this);
	}

	/**
	 * Rename this table
	 */
	public AuthCredential rename(String name) {
		return new AuthCredential(name, null);
	}
}
